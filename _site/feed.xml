<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Getting Saucy</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://blog.grubernaut.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://blog.grubernaut.com" />
<updated>2014-12-22T18:41:07-05:00</updated>
<id>http://blog.grubernaut.com/</id>
<author>
  <name>Jake Champlin</name>
  <uri>http://blog.grubernaut.com/</uri>
  <email>jake.champlin.27@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Kitchen Magic]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/kitchen-magic/" />
  <id>http://blog.grubernaut.com/kitchen-magic</id>
  <updated>2014-12-08 17:50:10 UTCT00:00:00-00:00</updated>
  <published>2014-12-08T00:00:00-05:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;creating-some-kitchen-magic-with-puppet&quot;&gt;Creating some kitchen magic with Puppet&lt;/h1&gt;
&lt;p&gt;At my current organization (The lovely folks at &lt;a href=&quot;http://www.minted.com&quot;&gt;Minted&lt;/a&gt;), we use Puppet for configuration management. At first I was fairly skeptical of using Puppet, having learned Chef in a past life, but I have given it my all. The main thing that has bugged me, however, about learning and using Puppet is the lack of a prescribed testing framework. There are other tools that are still maturing every day and actually work quite well for their designed purpose. &lt;a href=&quot;https://github.com/puppetlabs/beaker&quot;&gt;Beaker&lt;/a&gt; is one such tool that works fairly well for it’s designed purpose. The only hangup that our organization had with Beaker is the dependency of a Puppet Master. We currently run a masterless Puppet, using Git and Fabric to schedule and kickoff Puppet runs on individual nodes. We needed a localized testing framework to test our Puppet manifests and modules without changing our whole internal infrastructure.&lt;/p&gt;

&lt;p&gt;Some of the key requirements that we held for a testing framework were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Local Testing&lt;/li&gt;
  &lt;li&gt;Easy Integration with current testing frameworks (Serverspec, RSpec, BATS, etc…)&lt;/li&gt;
  &lt;li&gt;Parallel testing&lt;/li&gt;
  &lt;li&gt;Cheap&lt;/li&gt;
  &lt;li&gt;Fast&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lets-begin-cooking&quot;&gt;Let’s begin cooking&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href=&quot;https://github.com/test-kitchen/test-kitchen&quot;&gt;Test-Kitchen&lt;/a&gt;. Test Kitchen provides us with the framework to test all of our puppet modules, in one run, in parallel, while using a busser for our existing testing framework.
“But Wait!”, you say. “Test Kitchen is for Chef!”. This is where &lt;a href=&quot;https://github.com/neillturner/kitchen-puppet&quot;&gt;Kitchen-Puppet&lt;/a&gt; comes in. Kitchen Puppet is a provisioner driver for test-kitchen. This is the same as Chef-Solo and Chef-Zero. Since our organization uses masterless puppet, this fits into our infrastructure with grace. Kitchen-Puppet allows us to use Test-Kitchen’s existing testing framework, and provision our test subject with a “puppet apply” command. Be sure to read the full set of &lt;a href=&quot;https://github.com/neillturner/kitchen-puppet/blob/master/provisioner_options.md&quot;&gt;Provisioner Options&lt;/a&gt; for Kitchen-Puppet as well. Not only can you set provisioner options in the provisioner config block in the test-kitchen yaml config, but you can set provisioner options per test suite. We use this functionality at Minted to test different roles based on custom Facter Facts passed to the test suites.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://github.com/portertech/kitchen-docker&quot;&gt;Kitchen-Docker&lt;/a&gt;. Kitchen Docker allows us to have exceedingly fast tests ran against multiple test suites at the same time. Plus it’s Docker, so you know it’s cool. If you’re running on an inferior Operating System such as OSX, you’ll need to install and become familiar with &lt;a href=&quot;http://boot2docker.io/&quot;&gt;Boot2Docker&lt;/a&gt; before moving any further. Our Kitchen setup takes advantage of Boot2Docker by using the “DOCKER_HOST” environment variable. Depending on how many suites you want to run and how many you want to test in a convurrent mannor, it may no longer be wise to run all of your containers locally, whether through Boot2Docker or natively. Using the environment variable “DOCKER_HOST”, it is even possible to spin up a remote EC2 instance to host all of your testing containers. This situation would be extremely beneficial for automated testing from Jenkins, TravisCI, and others.&lt;/p&gt;

&lt;h3 id=&quot;our-setup&quot;&gt;Our Setup&lt;/h3&gt;

&lt;p&gt;I have created a github repo for this post as well. Simply clone the repo, and test to your liking. :)
&lt;a href=&quot;https://github.com/grubernaut/kitchen-example&quot;&gt;grubernaut-kitchen-example&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; .
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; ├── Gemfile
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; ├── Gemfile.lock
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; ├── manifests
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; │   └── site.pp
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; ├── &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; │   └── integration
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; │       └── webserver
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; │           └── serverspec
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; │               └── default_spec.rb
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; └── ubuntu12.04-dockerfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;mise-en-place&quot;&gt;Mise-en-place&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Getting things setup&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gemfile:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;serverspec&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;puppet&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kitchen-docker&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kitchen-puppet&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test-kitchen&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice in the following configuration file, we specifically declare which manifest to run under the provisioner hash. This is not necessary, of course, but merely a way to show how one can set provisioner-specific options for individual suites. We use this at Minted to set custom facter facts per test suite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.kitchen.yml:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;provisioner&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;puppet_apply&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;puppet_version&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;3.5.1-1puppetlabs1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;manifests_path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;manifests&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;modules_path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;modules&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;l-Scalar-Plain&quot;&gt;require_chef_for_busser&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ubuntu&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;driver_config&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;       &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ubuntu:12.04&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;       &lt;span class=&quot;l-Scalar-Plain&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;DOCKER_HOST&amp;#39;] %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;       &lt;span class=&quot;l-Scalar-Plain&quot;&gt;use_cache&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;       &lt;span class=&quot;l-Scalar-Plain&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ubuntu12.04-dockerfile&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;suites&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;webserver&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;provisioner&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;       &lt;span class=&quot;l-Scalar-Plain&quot;&gt;manifest&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;site.pp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One very important peice of the puzzle is the platform configuration. Here we are setting all of the settings necessary for kitchen and and kitchen-docker driver to talk to each other. Remember, if you are running Linux natively, you shouldn’t have to set a DOCKER_HOST environment variable. Unless, of course, you wish to run docker on a remote host. When running on OSX, you should already have the DOCKER_HOST environment variable set as a result of installing Boot2Docker.
We can, by all means, add custom provisioning steps to the base docker image, but I like to separate these steps out into a Dockerfile. There are, however, excellent base images for Ubuntu 14.04, see &lt;a href=&quot;https://github.com/phusion/baseimage-docker&quot;&gt;Phusion’s Base Docker Image&lt;/a&gt;; but I wanted to highlight the kitchen-docker feature of including your own custom Dockerfile inside of test-kitchen. This will allow you to customize the docker images for your organization beyond the scope of a base image. And that is what I am doing here with this Dockerfile&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ubuntu12.04-dockerfile:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Use Ubuntu Precise&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; FROM ubuntu:12.04
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Basic Docker Setup for Ubuntu&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Disable Upstart&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; RUN dpkg-divert --local --rename --add /sbin/initctl
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; RUN ln -sf /bin/true /sbin/initctl
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; ENV DEBIAN_FRONTEND noninteractive
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; RUN apt-get -y update
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; RUN apt-get install -y sudo openssh-server curl lsb-release
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Add Test-Kitchen Dependencies&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; RUN useradd -d /home/kitchen -m -s /bin/bash kitchen
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kitchen:kitchen&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; chpasswd
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kitchen ALL=(ALL) NOPASSWD:ALL&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside of the above kitchen config I added custom facter facts for the webserver suite to simply show how to set provisioner-specific options on a suite-by-suite basis. Now that we have the groundwork laid out, we need a manifest to provision. This is a very basic site manifest, but should be enough to demonstrate our purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;manifests/site.pp:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;puppet&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c-Singleline&quot;&gt;# Install a package&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;installed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c-Singleline&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;c-Singleline&quot;&gt;# Install a user called snorlax&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;snorlax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;present&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/snorlax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;managehome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/bin/bash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also need to write a serverspec test for the manifest above. Again, keeping with our simple theme, we should test all of the resources that we have defined in our manifest. Notice the file path for the serverspec test. This is required by the test-kitchen busser, which we will talk about later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;test/integration/webserver/serverspec/default_spec.rb:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Encoding: utf-8&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;serverspec&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:exec&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/sbin:/usr/local/sbin:$PATH&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;snorlax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We should have the groundwork all laid out for our testing to begin.&lt;/p&gt;

&lt;h3 id=&quot;fire-ze-missiles&quot;&gt;Fire ‘Ze Missiles!!!&lt;/h3&gt;

&lt;p&gt;We need gems installed,of course, to be able to test our infrastructure that we are creating.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once all of our gems are installed, we should be able to run test-kitchen and see our instance suite waiting to be converged:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% kitchen list
Instance              Driver  Provisioner  Last Action
webserver-ubuntu      Docker  PuppetApply  Created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything went smoothly, we should be able to now Create, Converge, and Test our “webserver” instance. Notice how test-kitchen actually installs chef during the output of the following command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;% kitchen converge webserver-ubuntu
Installing Chef
installing with dpkg...
Selecting previously unselected package chef.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ...        39770 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Unpacking chef &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;from .../chef_12.0.3-1_amd64.deb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up chef &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12.0.3-1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Thank you &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;installing Chef!
Transfering files to &amp;lt;webserver-ubuntu&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We actually want Test-Kitchen to behave in this fashion. This allows us to use chef-busser for all of our tests. Which is the real point of this whole project! Now we can run “kitchen test” and test-kitchen will create our docker instance, provision the instance with puppet, test the instance with serverspec, and then destroy our instance. All in one command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;Finished converging &amp;lt;webserver-ubuntu&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1m51.92s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
-----&amp;gt; Setting up &amp;lt;webserver-ubuntu&amp;gt;...
Fetching: thor-0.19.0.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Successfully installed thor-0.19.0
Fetching: busser-0.6.2.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Successfully installed busser-0.6.2
2 gems installed
-----&amp;gt; Setting up Busser
Creating BUSSER_ROOT in /tmp/busser
Creating busser binstub
Plugin serverspec installed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;version 0.5.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-----&amp;gt; Running postinstall &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;serverspec plugin
Finished setting up &amp;lt;webserver-ubuntu&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0m9.15s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
-----&amp;gt; Verifying &amp;lt;webserver-ubuntu&amp;gt;...
Suite path directory /tmp/busser/suites does not exist, skipping.
Uploading /tmp/busser/suites/serverspec/default_spec.rb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0644&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-----&amp;gt; Running serverspec &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;suite
-----&amp;gt; Installing Serverspec..
Fetching: net-ssh-2.9.1.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: net-scp-1.2.1.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: specinfra-2.10.4.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: multi_json-1.10.1.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: diff-lcs-1.2.5.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: rspec-support-3.1.2.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: rspec-expectations-3.1.2.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: rspec-core-3.1.7.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: rspec-its-1.1.0.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: rspec-mocks-3.1.3.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: rspec-3.1.0.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: serverspec-2.7.1.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-----&amp;gt; serverspec installed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;version 2.7.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/opt/chef/embedded/bin/ruby -I/tmp/busser/suites/serverspec -I/tmp/busser/gems/gems/rspec-support-3.1.2/lib:/tmp/busser/gems/gems/rspec-core-3.1.7/lib /opt/chef/embedded/bin/rspec --pattern /tmp/busser/suites/serverspec/&lt;span class=&quot;se&quot;&gt;\*\*&lt;/span&gt;/&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;_spec.rb --color --format documentation --default-path /tmp/busser/suites/serverspec

Package &lt;span class=&quot;s2&quot;&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;
should be installed

User &lt;span class=&quot;s2&quot;&gt;&amp;quot;snorlax&amp;quot;&lt;/span&gt;
should exist

Finished in 0.05471 seconds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;files took 0.17188 seconds to load&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
2 examples, 0 failures
Finished verifying &amp;lt;webserver-ubuntu&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0m7.45s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also run “kitchen verify” to test an already running instance without destroying the instance.&lt;/p&gt;

&lt;p&gt;Hopefully this helps you setup and start testing your puppet infrastructure using Test-Kitchen, Puppet, and Docker!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/kitchen-magic/&quot;&gt;Kitchen Magic&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on December 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Some Brief History]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/some-brief-history/" />
  <id>http://blog.grubernaut.com/some-brief-history</id>
  <updated>2014-07-03 00:07:32 UTCT00:00:00-00:00</updated>
  <published>2014-07-02T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;blockquote&gt;
  &lt;p&gt;“Life is like topography, Hobbes. There are summits of happiness and success, flat stretches of boring routine and valleys of frustration and failure.” 
― Bill Watterson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;why-even-write-this-post&quot;&gt;Why even write this post?&lt;/h4&gt;
&lt;p&gt;Generally, I want to get this post out there to the masses as a blanket introduction of who I am, what I do, and what I want to do. I want this to serve as an introductory “Hello” from the imaginary office water fountain in my living room. I want to invite you into my life and hold no reservations about anything. I feel that the best quality of life can only be achieved through up front honesty and empathy. I have found that there can be no inner peace and self-satisfaction with my life, should I attempt to play any games, systems, or politics. So, in carrying that mantra forward in this post, I hope that by the end you achieve a clear and concise picture of Jake Champlin.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;where-to-begin&quot;&gt;Where to begin&lt;/h3&gt;
&lt;p&gt;First of all, computers have always fascinated me. Scratch that. Empowered me. Given that I was born in one of the first “fortunate” generations of tech-ies, the first computer I ever got to play with was an old IBM PC-350 that had a whopping 1.6GB hard drive, 64MB of RAM, and 4MB of video memory. The mouse weighed a ton, the keyboard was an IBM Model-M, and the resolution would cause blindness by today’s standards, but I loved it. [I honestly loved the springs of the IBM Model-M, and they are mainly the reason I have Cherry MX-Blues in my mechanical keyboard today].My father had recently purchased a slew of 5 1/4” floppy disks of Commander Keen IV, Wolfenstein, and Doom. I was hooked. It didn’t matter that the machine ran horribly slow, or clunky. I was six years old, playing around in MS-DOS to enable God Mode in Wolfenstein. I quickly crashed the beloved IBM though, as playing around in DOS reading all of the HELP pages (I really hate MS-DOS’s internal documenting compared to UNIX) by deleting the entire C:&amp;gt; drive with a single command. &lt;/p&gt;

&lt;p&gt;From there my love for video games and mainly everything that John Carmack had created, I loved. Halo LAN parties during high school, World of Warcraft and Diablo binges were routine in my high school career. Drinking nearly lethal amounts of B.A.W.L.S. and staying up for the whole weekend to beat an entire game in one sitting was not uncommon for us. And I loved everything about it. &lt;/p&gt;

&lt;h3 id=&quot;getting-into-trouble-and-growing-from-it&quot;&gt;Getting into trouble and growing from it&lt;/h3&gt;
&lt;p&gt;I really &lt;em&gt;have&lt;/em&gt; to thank my parents looking back, being honest and all. Without being constantly grounded from various electronic devices and locked out of all of our networking equipment I doubt I would have ever learned how a firewall works, or how to reset and reconfigure a router. Getting around my father’s security implementations was often more fun than the end goal. I learned how to capture packets of traffic, spoof the mac address of our router, and bypass all content filtering enabled at home. &lt;/p&gt;

&lt;p&gt;By the time I had left high school I had: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Migrated fully to Linux.&lt;/li&gt;
  &lt;li&gt;Hacked my iPod Classic to run Linux [So I could play DOOM of course].&lt;/li&gt;
  &lt;li&gt;Hacked my PSP to gain access to a wireless web browser before the firmware allowed it. (This was really cool actually. Done via a DNS change in a networked game). &lt;/li&gt;
  &lt;li&gt;Two years of AP Java Programming classes.&lt;/li&gt;
  &lt;li&gt;Competed in Science Olympiad contests where I programmed and built a mechanical robot. &lt;/li&gt;
  &lt;li&gt;Built my own gaming computer.&lt;/li&gt;
  &lt;li&gt;Multiple instances of “breaking” our home networking equipment to gain access to the internet. (Which I was &lt;em&gt;always&lt;/em&gt; grounded from).&lt;/li&gt;
  &lt;li&gt;Learned networking hardware proficiently. Cable termination, Punch Down Blocks, Configuring Enterprise Switches / Routers, etc…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;college&quot;&gt;College&lt;/h3&gt;
&lt;p&gt;I attended the University of Kentucky for Electrical Engineering. Ugh, I hate even typing that out. I really did not like the circuitry courses and Chemistry. Oh man, I &lt;em&gt;really&lt;/em&gt; hated my chemistry classes. I loved the programming classes though. I maintained very high marks in both semesters of C++ programming. I left UK after 1.5 years, and decided to work full time in the food industry. While this was not the smartest choice I have ever made, it sure did make me realize a lot about where I wanted my future to go. &lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;beginning-my-professional-career&quot;&gt;Beginning my professional career&lt;/h3&gt;
&lt;p&gt;After working full time and living in Lexington, KY for three years I decided to come back home to Columbus, Indiana. I wanted to give school another shot, and decided the local community college in town would be a great place to save money and learn the skills that I would need to escalate my professional career. 
I got a job at a local computer repair store and that &lt;em&gt;really&lt;/em&gt; sparked my childhood interests in computers. Why I didn’t choose Computer Science as my major at UK, I can’t tell you. I don’t understand it either, honestly. &lt;/p&gt;

&lt;h4 id=&quot;development-career&quot;&gt;Development Career&lt;/h4&gt;
&lt;p&gt;While working at the local computer repair store I found a full time developer position at a local engineering firm. While the company took a huge risk in hiring me, they could see my potential and hunger to learn. The engineering company was a great first job. They allowed me the freedom to learn and grow at my own pace, while still teaching me the in’s and out’s of software development. As it was a small company, there was no operations team. The development team &lt;em&gt;was&lt;/em&gt; the operations team. This was no problem for me; installing, maintaining, and configuring Linux was what I really loved to do. And I did a lot of it. We ran all of our internal systems with various flavors of Gentoo Linux. Each of our systems ran a different kernel version, different package libraries, and different configurations. This really taught me a lot about the best development and operational practices.&lt;/p&gt;

&lt;h4 id=&quot;operations-career&quot;&gt;Operations Career&lt;/h4&gt;
&lt;p&gt;The engineering company has a sister company, a co-location data center, right next door. The previous Systems Administrator had recently left the position open, and I was graciously offered a chance to come aboard after only a year of working in development. I jumped at the offer. I was given the rare opportunity to join the data center’s staff, and thus began my first operations career. My &lt;em&gt;very&lt;/em&gt; first task was to completely tear down and re-build their entire VM cluster on new hypervisors. I cannot &lt;em&gt;begin&lt;/em&gt; to tell you how terrifying and exciting this was. I got to BUILD SYSTEMS! Using QEMU, libvirt, and my love for Linux I rebuilt their whole VM cluster on two new hypervisors; learning as I went.&lt;/p&gt;

&lt;p&gt;I had no direct senior administrator to bounce ideas off of, and no outside help aside from IRC channels. There was also no developer at the data center, so I was charged with maintaining and building their internal Rails applications as well. Coupled with the various in-house Nagios scripts that checked various hardware around the building using Modbus TCP, I also developed a brand new Rails application, a Sinatra application, and a few trial NodeJS applications. &lt;/p&gt;

&lt;p&gt;Learning how to manage and maintain the virtual machine cluster was one of the most fun and rewarding tasks I have ever accomplished at a job site. It was truly a pleasure to dig, discover, rebuild, and then maintain all of our internal VMs. &lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-future&quot;&gt;The Future&lt;/h3&gt;
&lt;p&gt;I hope to continue to enhance all of my skills in operations and administration, especially continuing to work with open source tools, utilities, and operating systems. I am really passionate about learning cloud infrastructure and automating infrastructure with code. I strongly feel that my background in development combined with administration and operations will help me to grow into a well rounded engineer. Just some of the things that I really want to do in the future are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud/Infrastructure Automation&lt;/li&gt;
  &lt;li&gt;PaaS&lt;/li&gt;
  &lt;li&gt;IaaS&lt;/li&gt;
  &lt;li&gt;Virtualization&lt;/li&gt;
  &lt;li&gt;Docker / LXC Containers&lt;/li&gt;
  &lt;li&gt;Build Systems&lt;/li&gt;
  &lt;li&gt;Deliver Seamless Product Throughput &lt;/li&gt;
  &lt;li&gt;Learn as much as I can&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really feel that culture and community can make or break a company. Some companies have it, some companies claim to have it, and most don’t even know what it is. From what I’ve seen, however, the companies that establish an environment of learning and creating are the most forward thinking and innovative. &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://born4rthis.files.wordpress.com/2014/01/michael-jordan-basketball-quotes.jpg&quot; alt=&quot;Jordan Quote&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;/h2&gt;
&lt;p&gt;Hopefully you’ve learned more about me from reading this. If you want to chat, I’m almost always on hangouts (jake.champlin.27@gmail.com) and &lt;a href=&quot;https://twitter.com/grubernaut&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/some-brief-history/&quot;&gt;Some Brief History&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on July 02, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Setting up a Continuous Delivery Blog]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/vps-migration/" />
  <id>http://blog.grubernaut.com/vps-migration</id>
  <updated>2014-06-21 18:29:10 UTCT00:00:00-00:00</updated>
  <published>2014-06-21T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;figure&gt;
  &lt;img src=&quot;/images/vps/digitalocean.jpeg&quot; /&gt;
  &lt;figcaption&gt;Digital Ocean - https://twitter.com/bryanl/status/479606602186895360&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;
&lt;p&gt;Growing up I never really had the capital to invest in a home setup, nor were my parents ever going to let me near the networking equipment after capturing packets of web traffic from my parents. Getting my own house for the first time last year and purchasing my own networking equipment opened up a lot of doors for me. I was now able to finally publish something on the public internet that I owned. The only problem with this arose with the financial costs of running bare metal servers at home, and the overhead cost I would need to begin such a project. &lt;/p&gt;

&lt;p&gt;I was talking to Brandon Burton (&lt;a href=&quot;https://twitter.com/solarce&quot;&gt;@solarce&lt;/a&gt;) recently and he told me stories of his first stack that he hosted himself. Remembering that I still hadn’t achieved that goal yet, I set out to remedy this problem as quickly as I could. &lt;/p&gt;

&lt;p&gt;Owning bare metal servers would still be a costly venture for me today. I would have to pay for the power consumption, the networking equipment to ensure security, and the increased bandwidth of my internet connection. Thus, configuring a VPS would be my best option. &lt;/p&gt;

&lt;p&gt;I chose Digital Ocean purely out of simplicity. I could have gone the Amazon AWS route, and still may in the future, but I wanted to start this project ASAP, and was itching to get tinkering with setup. This is my bare and basic write-up of how I migrated my Jekyll blog from a GitHub Pages site to a cloud hosted blog with Digital Ocean. &lt;/p&gt;

&lt;h2 id=&quot;migrating-my-personal-blog-to-a-digital-ocean-droplet&quot;&gt;Migrating my personal blog to a Digital Ocean Droplet&lt;/h2&gt;
&lt;p&gt;First things first, I needed to actually create a &lt;a href=&quot;https://www.digitalocean.com&quot;&gt;Digital Ocean&lt;/a&gt; Droplet. Creating a droplet on &lt;a href=&quot;https://www.digitalocean.com&quot;&gt;Digital Ocean&lt;/a&gt; was actually the easiest part of this whole process. I was entirely pleased with the whole setup of my account, the ease of integrating 2-Factor Authentication, and setting up billing via PayPal for my droplet. &lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-digital-ocean-droplet&quot;&gt;Setting up a Digital Ocean Droplet&lt;/h3&gt;
&lt;p&gt;Once I had a few coins in my Digital Ocean account and my SSH-keys added to my Digital Ocean account, starting a new Digital Ocean droplet couldn’t have been easier. I selected the type of VPS that I wanted, the image I wanted on it, the SSH-Keys I needed, and I was good to go. In 60 seconds I had a working droplet with Ubuntu-14.04 and root access. I was in! &lt;/p&gt;

&lt;h3 id=&quot;buying-a-domain-name&quot;&gt;Buying a Domain Name&lt;/h3&gt;
&lt;p&gt;To be honest, I didn’t particularly shop around for the cheapest domain name available, and went with the simpler option of GoDaddy.com. All jokes aside, it was a fairly simple and easy process that allowed me to pay via PayPal for my domain name. $13 bucks and I had grubernaut.com as a domain name. &lt;/p&gt;

&lt;h3 id=&quot;routing-dns-from-godaddy-to-digital-ocean&quot;&gt;Routing DNS from GoDaddy to Digital Ocean&lt;/h3&gt;
&lt;p&gt;This…. took me a while. I had to remember that GoDaddy.com was the DNR for the domain, and would need different nameservers specified to point to Digital Ocean. After removing all of the A Records, CNAME Records, and MX Records that GoDaddy.com initializes with, I was left with a bare Zone Record on GoDaddy.com. Aside from the three nameservers provided from Digital Ocean. &lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/images/vps/nameservers.png&quot; /&gt;
  &lt;figcaption&gt;Nameservers from Digital Ocean&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After adding the correct nameservers to GoDaddy.com, I then had to edit my Digital Ocean’s Zone File as well. I needed an A Record that pointed all traffic to my blog, as well as specific trafic for my blog to route correctly. &lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/images/vps/do-dns1.jpg&quot; /&gt;
  &lt;figcaption&gt;DNS on Digital Ocean&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Having that all setup, I was now able to ping grubernaut.com, www.grubernaut.com, and blog.grubernaut.com and have them all resolve to my blog droplet’s IP address. &lt;/p&gt;

&lt;h3 id=&quot;setting-up-continuous-delivery&quot;&gt;Setting up Continuous Delivery&lt;/h3&gt;
&lt;p&gt;Setting up continuous delivery inside of my droplet was fairly easy since I was using Git as a versioning tool. 
First, I logged into my droplet and created a remote git server. 
Then, I initialized a bare repository, and created a new post-receive hook. (This would be where the continuous delivery comes in!). &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; mkdir grubernaut.blog.git
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;grubernaut.blog.git
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; git --bare init
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; touch hooks/post-receive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I opened up the &lt;strong&gt;only&lt;/strong&gt; editor there is (ViM) and wrote my post-receive hook. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GIT_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/grubernaut.blog.git
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TMP_GIT_CLONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/tmp/grubernaut.blog
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PUBLIC_WWW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/www/grubernaut.blog
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; git clone &lt;span class=&quot;nv&quot;&gt;$GIT_REPO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TMP_GIT_CLONE&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; jekyll build -s &lt;span class=&quot;nv&quot;&gt;$TMP_GIT_CLONE&lt;/span&gt; -d &lt;span class=&quot;nv&quot;&gt;$PUBLIC_WWW&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; rm -Rf &lt;span class=&quot;nv&quot;&gt;$TMP_GIT_CLONE&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This hook would clone my repository into a temporary directory, build my site with jekyll, and place the built site into a public directory. And this hook would run after every commit that was received. &lt;/p&gt;

&lt;p&gt;The only thing left to do on my droplet was to configure Apache2 to point to &lt;code&gt;/var/www/grubernaut.blog/&lt;/code&gt; and I was all set!&lt;/p&gt;

&lt;h3 id=&quot;configuring-workstation-repo&quot;&gt;Configuring Workstation Repo&lt;/h3&gt;
&lt;p&gt;On my development workstation, I had to do some slight configuration to be able to push to my droplet and have it be automagically deployed. Luckily this is just a simple one-line git command. 
&lt;code&gt;bash
git remote add deploy &amp;lt;user&amp;gt;@&amp;lt;site&amp;gt;:~/&amp;lt;path-to-repo&amp;gt;.git
&lt;/code&gt;
From there I can now run a &lt;code&gt;git push deploy master&lt;/code&gt; and git will take care of the deployment chain for me. &lt;/p&gt;

&lt;h3 id=&quot;final-thoughts-and-future-plans&quot;&gt;Final Thoughts and Future Plans&lt;/h3&gt;
&lt;p&gt;Overall, this was a tremendous learning experience for me, and a great introduction to VPS’s. My goal now is to spin up more Droplets on Digital Ocean and start building a full stack of Droplets. 
Things like: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A VPN Server&lt;/li&gt;
  &lt;li&gt;A ZNC IRC Bouncer (Something I’ve wanted for a while)&lt;/li&gt;
  &lt;li&gt;A Sensu Server to monitor my stack&lt;/li&gt;
  &lt;li&gt;etc…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually I would love to have this whole setup served from Chef cookbooks, and fully automated. This was a great introduction to how the infrastructure in Cloud-Land works though. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/vps-migration/&quot;&gt;Setting up a Continuous Delivery Blog&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on June 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The effects of a DevOps community]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/the-effects-of-a-devops-community/" />
  <id>http://blog.grubernaut.com/the-effects-of-a-devops-community</id>
  <updated>2014-06-03 01:22:47 UTCT00:00:00-00:00</updated>
  <published>2014-06-02T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;figure&gt;
	&lt;img src=&quot;/images/community/bubble.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;community-interactions-in-devops&quot;&gt;Community Interactions in DevOps&lt;/h2&gt;
&lt;p&gt;I recently attended &lt;a href=&quot;http://devopsdays.org&quot;&gt;DevOpsDays&lt;/a&gt; &lt;a href=&quot;http://devopsdays.org/events/2014-pittsburgh/&quot;&gt;Pittsburgh &lt;/a&gt;, which was my very first conference ever. When I mean first conference ever, I truly mean my very first conference. I’ve never attended a GenCon, ComicCon, E3, or LISA conference in my entire life. And I have got to say that I was completely blown away. Sure, the talks were outstanding, the food was amazing, and the sponsors were giving away a lot of free swag. There was a lot of material to be learned, a lot of people to meet, and a lot of new experiences to take in for a small town kid in Pittsburgh for his first time. But what really made the conference completely life changing for me was the entire community. &lt;/p&gt;

&lt;h3 id=&quot;heroism-and-pride&quot;&gt;Heroism and Pride&lt;/h3&gt;
&lt;p&gt;What truly blew me away right off the bat was the lack of heroism and pride from within the community. Here I was, surrounded by extremely talented and legendary people inside of the DevOps community: Mark Imbriaco, Andrew Shafer, Seth Vargo, Dan Buch, Colin Dean, John Vincent, Nathen Harvey, Brian Wagner, Pete Cheslock, and many many others. And yet, there was not a single hint of brash arrogance. My first day I was at the conference I was readily welcomed as if I was already a prominent member of the community. As I was eating my massive piles of bacon for breakfast, I was greeted openly by several other members of the community. No one, I mean no one, ever looked down on me or made me feel inferior and inadequate for being at the conference given my small amount of experience to date. 
This was the first time in my life that I had ever been fully accepted into an academic setting without being judged or assessed.&lt;/p&gt;

&lt;p&gt;There was even an excellent talk given by &lt;a href=&quot;https://twitter.com/sigje&quot;&gt;Jennifer Davis&lt;/a&gt; called “From Hero to Zero”. The talk describes how damaging hero’s are to our work environments and to our community. I don’t want to spoil the amazing talk anymore, but you should definitely watch it below when you get a chance. &lt;/p&gt;

&lt;iframe src=&quot;https://new.livestream.com/accounts/1466347/events/3044568/videos/52394934/player?width=640&amp;amp;height=360&amp;amp;autoPlay=false&amp;amp;mute=false&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;open-advice-and-understanding&quot;&gt;Open Advice and Understanding&lt;/h3&gt;
&lt;p&gt;The more and more I networked with the community at DevOpsDays in Pittsburgh, the more and more advice I was given. What I noticed as strange at first yet grew to understand was how all of the advice I was given from several different individuals never contradicted advice I was given from a previous individual. I had truly found a community that cared and gave unbiased advice covering a range of issues. There was no judging on the topics that were brought up. No eye rolling or heavy sighing as if to say, “Oh great, here’s another ‘new guy’…”. &lt;/p&gt;

&lt;p&gt;The more and more I talked to various developers and operators alike, the more and more friendly they became. I suddenly realized that everyone at this conference &lt;em&gt;truly&lt;/em&gt; cares about the community. Nobody was there trying to make a name for themselves, or trying to one-up the other team. Nobody had a “Linus” mentality about “How things should work”, everybody seemed to contribute equally to the common goal of DevOps. There was hardly (if any) bashing between developers and operators. &lt;/p&gt;

&lt;p&gt;I never knew a world like this had existed….&lt;/p&gt;

&lt;h3 id=&quot;dinner-and-hack-a-social&quot;&gt;Dinner and Hack-A-Social&lt;/h3&gt;
&lt;p&gt;The last night of the conference I was graciously invited to join a few members of the &lt;a href=&quot;http://www.getchef.com&quot;&gt;Chef&lt;/a&gt; team and Bridget Kromhout (Who is organizing &lt;a href=&quot;http://devopsdays.org/events/2014-minneapolis/&quot;&gt;DevOpsDays Minneapolis&lt;/a&gt;). I really got to know the people there at dinner and after talking to Stephen Lauck, Stephen Danna, Julian Dunn, and Bridget. And during dinner we got to talk about a wide variety of topics, including Chef. I was very fortunate to even be present at dinner with them. I mean how many times can someone say that they got to eat dinner with a bunch of Chefs at a restaurant called NaCl (Salt)? &lt;/p&gt;

&lt;p&gt;The last day that I was in Pittsburgh, the organizers of the conference rented out space at &lt;a href=&quot;http://www.revvoakland.com&quot;&gt;Revv Oakland&lt;/a&gt;, which was by far &lt;strong&gt;the coolest&lt;/strong&gt; experience I have ever had to date. Not only was I able to be more and more involved in the community, but I was able to hack on open source projects &lt;em&gt;with&lt;/em&gt; other people in a semi-paired environment. I mean, sure you can hack around on open source projects with people on IRC, but then you always end up with this crap: &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/community/irc.png&quot; /&gt;
	&lt;figcaption&gt;Typical IRC Convo...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;the-future&quot;&gt;The Future&lt;/h3&gt;
&lt;p&gt;I honestly believe that if DevOps is ever going to have a successful future in bringing the development team and the operations team together it will &lt;em&gt;have&lt;/em&gt; to be with the kind of respectful patience and tolerance that I witnessed this weekend. I was honestly blown away by the amount of kindness at the conference. This would be the equivalent of putting hardcore VI users in the same room as hardcore EMACS users in the 90’s and watching them be productive. &lt;/p&gt;

&lt;p&gt;Actually the only thing bad that I can think of about this weekend was this song that Andrew Shafer and Dan Buch showed me that I cannot get out of my head. &lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/F-glHAzXi_M&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;Calvin: “Sometimes when I’m talking, my words can’t keep up with my thoughts. I wonder why we think faster than we speak. Probably so we can think twice.” &lt;/p&gt;
&lt;/blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/the-effects-of-a-devops-community/&quot;&gt;The effects of a DevOps community&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on June 02, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Soylent Day 1]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/soylent-day-1/" />
  <id>http://blog.grubernaut.com/soylent-day-1</id>
  <updated>2014-05-22 02:49:40 UTCT00:00:00-00:00</updated>
  <published>2014-05-21T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;figure&gt;
	&lt;img src=&quot;/images/soylent/soylent_view.jpeg&quot; /&gt;
	&lt;figcaption&gt;DIY Soylent&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;what-is-soylent&quot;&gt;What is Soylent?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://soylent.me&quot;&gt;Soylent&lt;/a&gt; is some sort of wicked Brave New World-esque food created by Robert Rhinehart and his team after recognizing the disproportionate amount of time and money they spent creating nutritionally complete meals.&lt;/p&gt;

&lt;p&gt;Soylent is a food product (classified as a food, not a supplement, by the FDA) designed for use as a staple meal by all adults. Each serving of Soylent provides maximum nutrition with minimum effort.&lt;/p&gt;

&lt;h2 id=&quot;so-why-would-i-drink-it&quot;&gt;So Why Would I Drink It?&lt;/h2&gt;
&lt;p&gt;The main benefit that I saw when researching Soylent was the cost. I would be able to have a whole days worth of food for $3.50 per day. Not only would it be insanely cheap and sustainable, I would be achieving my exact nutritional requirements. &lt;/p&gt;

&lt;h2 id=&quot;cost-ingredients&quot;&gt;Cost? Ingredients?&lt;/h2&gt;
&lt;p&gt;I used Soylent’s &lt;a href=&quot;http://diy.soylent.me&quot;&gt;DIY Tool&lt;/a&gt; to select the community favorite recipe called &lt;a href=&quot;http://diy.soylent.me/recipes/people-chow-301-tortilla-perfection&quot;&gt;People’s Chow&lt;/a&gt;. With only 8 ingredients (plus water) this seemed like a low-overhead and low-risk entry point into my Soylent experiment. I spent $223 for ~2-3 months worth of food, leaving me with an approximate cost of $3.50/day. The only thing I replaced from the &lt;a href=&quot;http://diy.soylent.me/recipes/people-chow-301-tortilla-perfection&quot;&gt;People’s Chow Recipe&lt;/a&gt; was to substitute Olive Oil for the Soybean Oil. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/soylent/nutrition.png&quot; /&gt;
	&lt;figcaption&gt;People's Chow Nutrition Information&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/soylent/soylent_ingredients.jpeg&quot; /&gt;
	&lt;figcaption&gt;All ingredients of Soylent before being mixed&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;mixing-process&quot;&gt;Mixing Process&lt;/h2&gt;
&lt;p&gt;The first time I made the DIY Soylent, I completely messed it up. My blender is too small to blend the whole day’s weight of Soylent powder, thus leaving me with an insanely grainy, disgusting, porridge. 
The second time I made the DIY Soylent, I split the weight of the dry ingredients in half, blending half of a days “food” at a time. The steps I found that work best are as follows: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Measure Dry Ingredients&lt;/li&gt;
  &lt;li&gt;Shake Dry Ingredients and add to blender&lt;/li&gt;
  &lt;li&gt;Measure out oil and add to blender&lt;/li&gt;
  &lt;li&gt;Add water to blender &lt;/li&gt;
  &lt;li&gt;Blend on high for 4+ minutes, then blend on slow for 6+ minutes &lt;/li&gt;
  &lt;li&gt;Repeat 1-5 for other half of days “food”&lt;/li&gt;
  &lt;li&gt;Refrigerate Soylent overnight &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using this process I was able to get the best taste out of the DIY Soylent as well as the best consistency of the liquid. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/soylent/soylent_blend.jpeg&quot; /&gt;
	&lt;figcaption&gt;Blending up a fresh batch of Soylent&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;but-does-it-taste-good&quot;&gt;But does it taste good?&lt;/h2&gt;
&lt;p&gt;The first batch of DIY Soylent I made tasted purely horrible. After I split the batch in half and blended it in segments the texture of the Soylent was nearly water. I added 2 Tbsp of Ground Cinnamon along with 3Tbsp of Splenda to each days “food” as well, which seemed to help take away from the bland taste of the Masa. &lt;/p&gt;

&lt;h2 id=&quot;first-days-report&quot;&gt;First Day’s Report&lt;/h2&gt;
&lt;p&gt;So far it was fairly easy until right before bedtime to go all day without food. The Soylent is actually fairly filling. After drinking half of a “meal”, I actually felt full and satisfied as if I had just eaten a large meal. 
After fixing the taste of the Soylent, I can honestly see this being a viable solution to save money on nutritious food costs. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/soylent-day-1/&quot;&gt;Soylent Day 1&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on May 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Weekend at Prom]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/weekend-at-prom/" />
  <id>http://blog.grubernaut.com/weekend-at-prom</id>
  <updated>2014-04-29 20:55:20 UTCT00:00:00-00:00</updated>
  <published>2014-04-29T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;prom&quot;&gt;Prom&lt;/h2&gt;
&lt;p&gt;This past weekend the girlfriend and I went to the &lt;a href=&quot;http://www.capadultprom.com&quot;&gt;Columbus Adult Prom&lt;/a&gt; in order to help raise funds for preventing child abuse. 
While, I am far from being a social butterfly, it was a fun “Night on the town” and we were able to get all dressed up for the event. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/prom/prom1.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;Heading out to Prom&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/prom/prom2.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/prom/prom3.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;motorcycle&quot;&gt;Motorcycle&lt;/h2&gt;

&lt;p&gt;I was even able to talk her into a short ride on the bike this weekend. I’ll probably have full tag and more posts to come, fully devoted to the bike later on. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/prom/bike.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;2003 VTX1800R&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;wrapup&quot;&gt;Wrapup&lt;/h3&gt;
&lt;p&gt;Overall, it was a fun weekend. Didn’t get a whole lot of things done that I wanted to, but that’s life. I have a plan written out for implementing a firewall at home for IPv6, and was able to start studying a little for my CCNA exam in July. Didn’t do any GO discovery or Emacs discovery, but found SublimeText2 and will probably stick with that for the future. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hobbes: So the secret to good self-esteem is to lower your expectations to the point where they’re already met?&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/weekend-at-prom/&quot;&gt;Weekend at Prom&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on April 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Syncing Sublime Text with Dropbox]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/syncing-sublime-text-settings-with-dropbox/" />
  <id>http://blog.grubernaut.com/syncing-sublime-text-settings-with-dropbox</id>
  <updated>2014-04-30 02:49:50 UTCT00:00:00-00:00</updated>
  <published>2014-04-29T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;figure&gt;
	&lt;img src=&quot;/images/sublime/sublime1.png&quot; /&gt;
	&lt;figcaption&gt;Current Sublime Text 2 Setup&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;syncing-user-packages-for-sublime-text-2&quot;&gt;Syncing User Packages for Sublime Text 2&lt;/h3&gt;
&lt;p&gt;Recently (read as: “This Week”) I’ve nearly fallen in love with &lt;a href=&quot;http://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt; and you should seriously try it out if you haven’t already. You can use Sublime Text and evaluate it for free, yet a license must be purchased for continued use. I’ve used it for the past week now, and started the process of configuring my development bed around Sublime Text. 
I’ll cover my Sublime Text configuration later on in the post. &lt;/p&gt;

&lt;p&gt;One of the first issues I ran into with Sublime Text was maintaining a concurrent setup across my iMac at work and my MBP at home. As a native Vim lover, I was used to creating a symbolic link to a Dropbox file of my .vimrc and .vim directories. And in fact, it is quite the same process for Sublime Text. &lt;/p&gt;

&lt;h2 id=&quot;osx&quot;&gt;OSX&lt;/h2&gt;
&lt;p&gt;In OSX, first find which machine you wish to copy the settings from. 
&lt;em&gt;hint:&lt;/em&gt; it’s the Sublime Text 2 that you have already fully configured to your liking at the time. &lt;/p&gt;

&lt;p&gt;On that machine make sure that Sublime Text 2 is fully closed, then create a Dropbox folder to hold your User Packages folder. Then create a symbolic link between the two. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Sublime&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Text&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;2/Packages/
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; mkdir ~/Dropbox/Sublime
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; mv User ~/Dropbox/Sublime/
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; ln -s ~/Dropbox/Sublime/User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If your Dropbox folder is mounted in a different directory than &lt;code&gt;~/Dropbox&lt;/code&gt; then replace the directory path specified above with the path to your local Dropbox directory. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sublime Text 3:&lt;/strong&gt; Simply replace the &lt;code&gt;Sublime\ Text\ 2/&lt;/code&gt; directory with: &lt;code&gt;Sublime\ Text\ 3/&lt;/code&gt; directory path. &lt;/p&gt;

&lt;p&gt;Then on every subsequent machine that you wish to sync your Sublime Text settings with, remove your User Packages directory and create a symbolic link to your Dropbox User directory. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Sublime&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Text&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;2/Packages/
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; rm -r User
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; ln -s ~/Dropbox/Sublime/User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you start up Sublime Text again on the subsequent machines, Sublime Text will start to download and install all the packages from your User Packages directory. As well as implement all of your settings specified in your User Settings. 
&lt;em&gt;Note:&lt;/em&gt; If you are working with a fresh install of Sublime Text, you will have to install &lt;a href=&quot;https://sublime.wbond.net/installation#st2&quot;&gt;Package Control&lt;/a&gt; before any packages can be synced. &lt;/p&gt;

&lt;h3 id=&quot;my-sublime-text-configuration&quot;&gt;My Sublime Text Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;As of 4/29/14. WIP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My Currently Used Packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kemayo/sublime-text-git/wiki&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/revolunet/sublimetext-markdown-preview&quot;&gt;Markdown Preview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wbond.net/sublime_packages/sftp&quot;&gt;SFTP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/afterdesign/MacTerminal&quot;&gt;MacTerminal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jisaacks/GitGutter&quot;&gt;GitGutter&lt;/a&gt; - Extremely Nice, Highly recommended. &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/netpro2k/SublimeBlockCursor&quot;&gt;Sublime Block Cursor&lt;/a&gt; - Because with vintage mode it’s near impossible to see the cursor in default. &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/buymeasoda/soda-theme/&quot;&gt;Theme - Soda&lt;/a&gt; - Really makes Sublime more &lt;em&gt;Mac&lt;/em&gt; like. Beautiful. &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sublime.wbond.net/installation&quot;&gt;Package Control&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My Current User Settings: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;bold_folder_labels&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;color_scheme&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Packages/Color Scheme - Default/Monokai.tmTheme&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;fade_fold_buttons&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;highlight_line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;ignored_packages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;line_padding_bottom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;line_padding_top&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;theme&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Soda Dark.sublime-theme&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;&amp;quot;vintage_start_in_command_mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, of course I use vintage mode, and start in command mode. Some habits never change.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Life is like topography, Hobbes. There are summits of happiness and success, flat stretches of boring routine and valleys of frustration and failure.  &lt;/p&gt;
&lt;/blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/syncing-sublime-text-settings-with-dropbox/&quot;&gt;Syncing Sublime Text with Dropbox&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on April 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Wiring Project / Friday Update]]></title>
 <link rel="alternate" type="text/html" href="http://blog.grubernaut.com/wiring-project-slash-friday-update/" />
  <id>http://blog.grubernaut.com/wiring-project-slash-friday-update</id>
  <updated>2014-04-25 20:49:10 UTCT00:00:00-00:00</updated>
  <published>2014-04-25T00:00:00-04:00</published>
  
  <author>
    <name>Jake Champlin</name>
    <uri>http://blog.grubernaut.com</uri>
    <email>jake.champlin.27@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This past week at work I’ve had the fortunate opportunity to start wiring on our new
Business Continuity Center. The center will end up housing 250+ seats, each with their own
power and network pulls. &lt;/p&gt;

&lt;p&gt;I was surprised at how heavy all 250+ CAT6e cables were, and especially how taxing they
were on our cable trays. Running the wire through the cable trays was easy enough, but
this past week I had the amazing job of combing through our the CAT6e cable and bundling
them into a neat and ordered set. &lt;/p&gt;

&lt;h2 id=&quot;combing-cable&quot;&gt;Combing Cable&lt;/h2&gt;
&lt;p&gt;We purchased our Cable Comb from
&lt;a href=&quot;http://www.amazon.com/Panduit-CBOT24K-Organizing-Fastener-Inserts/dp/B00429P1OU/ref=sr_1_1?ie=UTF8&amp;amp;qid=1398484241&amp;amp;sr=8-1&amp;amp;keywords=panduit+cable+comb&quot;&gt;Amazon&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;/images/wiring/cable_comb.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;Cable Comb from Amazon&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The Cable Comb was fairly easy to use, however with this much CAT6e cable, there was a lot
of hand work to untangle knots and kinks that the comb was unable to sort through on it’s
own. &lt;/p&gt;

&lt;h3 id=&quot;before&quot;&gt;Before:&lt;/h3&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;img src=&quot;/images/wiring/wire_hang.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;/images/wiring/wire_floor.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;/images/wiring/wire_floor2.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;after&quot;&gt;After:&lt;/h3&gt;

&lt;figure class=&quot;half&quot;&gt;
	&lt;img src=&quot;/images/wiring/wire_bundle.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;/images/wiring/floor_bundle.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;After combing through the CAT6e cables in our networking closet, I spent the remainder of
the week terminating all of our landings from our wire trays. While it was a nice break
from development and SysAd work, I’m itching to get back to it as soon as our wiring
project is completed. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;C’est la vie &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;weekend-plans&quot;&gt;Weekend Plans:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Final Exams in two weeks. &lt;/li&gt;
  &lt;li&gt;Home Networked IPv6 Firewall &lt;/li&gt;
  &lt;li&gt;CCNA Studying&lt;/li&gt;
  &lt;li&gt;GOLang + Emacs discovery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of my Saturday night will be taken up at &lt;a href=&quot;http://capadultprom.com&quot;&gt;CAP Adult Prom&lt;/a&gt;,
so I hope I can get some fun time to work on some stuff.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.grubernaut.com/wiring-project-slash-friday-update/&quot;&gt;Wiring Project / Friday Update&lt;/a&gt; was originally published by Jake Champlin at &lt;a href=&quot;http://blog.grubernaut.com&quot;&gt;Getting Saucy&lt;/a&gt; on April 25, 2014.&lt;/p&gt;</content>
</entry>

</feed>
